// <auto-generated />
using System;
using AcquaDiCane.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcquaDiCane.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20250705025327_ChangeMascotaTurnoToOneToMany")]
    partial class ChangeMascotaTurnoToOneToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcquaDiCane.Models.DetalleDelTurno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("PrecioServicio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServicioAsignadoId")
                        .HasColumnType("int");

                    b.Property<int>("TurnoAsignadoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicioAsignadoId");

                    b.HasIndex("TurnoAsignadoId");

                    b.ToTable("DetallesDeTurnos");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.AplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicationUserId")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.Peluquero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicationUserId")
                        .IsUnique();

                    b.ToTable("Peluqueros");
                });

            modelBuilder.Entity("AcquaDiCane.Models.JornadaDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraFinal")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int>("PeluqueroCorrespondienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeluqueroCorrespondienteId");

                    b.ToTable("JornadasSemanales");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Alergico")
                        .HasColumnType("bit");

                    b.Property<bool>("Castrado")
                        .HasColumnType("bit");

                    b.Property<int>("ClienteAsignadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<string>("Raza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SinRaza")
                        .HasColumnType("bit");

                    b.Property<string>("Tamaño")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFotoPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteAsignadoId");

                    b.ToTable("Mascotas");
                });

            modelBuilder.Entity("AcquaDiCane.Models.MetodoDePago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreDelMetodo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MetodosDePago");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreDelMetodo = "Efectivo"
                        },
                        new
                        {
                            Id = 2,
                            NombreDelMetodo = "MercadoPago"
                        },
                        new
                        {
                            Id = 3,
                            NombreDelMetodo = "Pendiente"
                        });
                });

            modelBuilder.Entity("AcquaDiCane.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CuentaDestino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<string>("MercadoPagoPreferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetodoDePagoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int");

                    b.Property<int>("TurnoId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetodoDePagoId");

                    b.HasIndex("TurnoId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("AcquaDiCane.Models.ReciboDePago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<int>("PagoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PagoId")
                        .IsUnique();

                    b.ToTable("RecibosDePago");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionEnMinutos")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHoraDelTurno")
                        .HasColumnType("datetime2");

                    b.Property<int>("MascotaAsignadaId")
                        .HasColumnType("int");

                    b.Property<string>("MotivoCancelacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacionesFinalizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PagoId")
                        .HasColumnType("int");

                    b.Property<int>("PeluqueroAsignadoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MascotaAsignadaId");

                    b.HasIndex("PagoId")
                        .IsUnique()
                        .HasFilter("[PagoId] IS NOT NULL");

                    b.HasIndex("PeluqueroAsignadoId");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AcquaDiCane.Models.DetalleDelTurno", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Servicio", "ServicioAsignado")
                        .WithMany("Detalles")
                        .HasForeignKey("ServicioAsignadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcquaDiCane.Models.Turno", "TurnoAsignado")
                        .WithMany("Detalles")
                        .HasForeignKey("TurnoAsignadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServicioAsignado");

                    b.Navigation("TurnoAsignado");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.Cliente", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Identity.AplicationUser", "AplicationUser")
                        .WithOne("PerfilCliente")
                        .HasForeignKey("AcquaDiCane.Models.Identity.Cliente", "AplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AplicationUser");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.Peluquero", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Identity.AplicationUser", "AplicationUser")
                        .WithOne("PerfilPeluquero")
                        .HasForeignKey("AcquaDiCane.Models.Identity.Peluquero", "AplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AplicationUser");
                });

            modelBuilder.Entity("AcquaDiCane.Models.JornadaDiaria", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Identity.Peluquero", "PeluqueroCorrespondiente")
                        .WithMany("JornadaSemanal")
                        .HasForeignKey("PeluqueroCorrespondienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeluqueroCorrespondiente");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Mascota", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Identity.Cliente", "ClienteAsignado")
                        .WithMany("Mascotas")
                        .HasForeignKey("ClienteAsignadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteAsignado");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Pago", b =>
                {
                    b.HasOne("AcquaDiCane.Models.MetodoDePago", "MetodoDePago")
                        .WithMany("Pagos")
                        .HasForeignKey("MetodoDePagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcquaDiCane.Models.Turno", "Turno")
                        .WithMany()
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetodoDePago");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("AcquaDiCane.Models.ReciboDePago", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Pago", "Pago")
                        .WithOne()
                        .HasForeignKey("AcquaDiCane.Models.ReciboDePago", "PagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Turno", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Mascota", "MascotaAsignada")
                        .WithMany("Turnos")
                        .HasForeignKey("MascotaAsignadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcquaDiCane.Models.Pago", "Pago")
                        .WithOne()
                        .HasForeignKey("AcquaDiCane.Models.Turno", "PagoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AcquaDiCane.Models.Identity.Peluquero", "PeluqueroAsignado")
                        .WithMany("Turnos")
                        .HasForeignKey("PeluqueroAsignadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MascotaAsignada");

                    b.Navigation("Pago");

                    b.Navigation("PeluqueroAsignado");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Identity.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Identity.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcquaDiCane.Models.Identity.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AcquaDiCane.Models.Identity.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.AplicationUser", b =>
                {
                    b.Navigation("PerfilCliente")
                        .IsRequired();

                    b.Navigation("PerfilPeluquero")
                        .IsRequired();
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.Cliente", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Identity.Peluquero", b =>
                {
                    b.Navigation("JornadaSemanal");

                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Mascota", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("AcquaDiCane.Models.MetodoDePago", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Servicio", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("AcquaDiCane.Models.Turno", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
